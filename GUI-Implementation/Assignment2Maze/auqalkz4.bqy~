using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Threading.Tasks;
using System.Drawing;
using System.Windows.Forms;

namespace Assignment2Maze
{
    public class GenerateEnvironment
    {
        public string defaultFile;

        public int gridx;
        public int gridy;
        public Block[,] grid;
        public enum Block
        {
            Actor,
            Path,
            Move,
            Wall,
            Goal1,
            Goal2

        }

        public int agentx;
        public int agenty;

        // [0, 0] , [0, 1] | Goal 1
        // [1, 0] , [1, 1] | Goal 2
        public int[,] goals = new int[2, 2]; 


        //Initialise data through file (by default)
        public void GetData()
        {
            defaultFile = Directory.GetCurrentDirectory() + "/RobotNav-test.txt"; //default file
            Load(defaultFile);
        }

        //Initialise data through file (by fileInput(
        public void GetData(string fileName)
        {
            try
            {
                Load(fileName);
            }
            catch
            {
                MessageBox.Show("Invalid file input.");
            }
        }

        //Load data
        public void Load(string src) 
        {
            int fileLength = File.ReadLines(src).Count();
            StreamReader sr = new StreamReader(src);

            //Read lines
            for (int i = 0; i < fileLength; i++)
            {
                string line = sr.ReadLine();
                string[] lines = line.Split('[', ']', ',', '(', ')', '|');
                if (i == 0) //Start State - Row & Columns
                {
                    gridx = Convert.ToInt32(lines[2]);
                    gridy = Convert.ToInt32(lines[1]);
                    if (gridx <= 1 || gridy <= 1)
                    {
                        MessageBox.Show("NxM Grid; N and/or M cannot be 0.");
                    }
                    grid = new Block[gridx, gridy];
                    InitialiseGird();
                }
                else if (i == 1) //Get Agent
                {
                    agentx = Convert.ToInt32(lines[1]);
                    agenty = Convert.ToInt32(lines[2]);
                }
                else if (i == 2) //Get Goals
                {
                    goals[0, 0] = Convert.ToInt32(lines[1]);
                    goals[0, 1] = Convert.ToInt32(lines[2]);
                    goals[1, 0] = Convert.ToInt32(lines[5]);
                    goals[1, 1] = Convert.ToInt32(lines[6]);
                }
                else if (i >= 3) //Get Walls
                {
                    int wallx = Convert.ToInt32(lines[1]);
                    int wally = Convert.ToInt32(lines[2]);
                    int wallWide = Convert.ToInt32(lines[3]);
                    int wallHeight = Convert.ToInt32(lines[4]);

                    ExpandWall(wallx, wally, wallWide, wallHeight);
                }
            }
            //Finish Grid
            grid[agentx, agenty] = Block.Actor;
            grid[goals[0, 0], goals[0, 1]] = Block.Goal1;
            grid[goals[1, 0], goals[1, 1]] = Block.Goal2;
        }

        //Extend walls depending on wall wide and height 
        public void ExpandWall(int wallx, int wally, int wallWide, int wallHeight)
        {
            grid[wallx, wally] = Block.Wall;
            if (wallWide >= 2)
            {
                for (int i = 1; i < wallWide; i++)
                {
                    grid[wallx + i, wally] = Block.Wall;
                }
            }
            if (wallHeight >= 2)
            {
                for (int j = 1; j < wallHeight; j++)
                {
                    grid[wallx, wally + j] = Block.Wall;
                }
            }
            if (wallWide >= 2 && wallHeight >= 2) 
            {
                for (int i = 1; i < wallWide; i++)//It could be just this but for the sake of ease 
                {
                    for (int j = 1; j < wallHeight; j++)
                    {
                        grid[wallx + i, wally + j] = Block.Wall;
                    }
                }
            }
        }

        //Initialise Blocks as paths by default
        public void InitialiseGird()
        {
            for (int i = 0; i < gridx; i++)
            {
                for (int j = 0; j < gridy; j++)
                {
                    grid[i, j] = Block.Path;
                }
            }
        }

        //Draw Text-based grid (using rtb)
        public string DrawGrid()
        {
            string output = "";
            if (grid != null)
            {
                for (int i = 0; i < gridy; i++)
                {
                    for (int j = 0; j < gridx; j++)
                    {
                        if (grid[j, i] == Block.Path)
                        {
                            output += "[   ]";
                        }
                        else if (grid[j, i] == Block.Wall)
                        {
                            output += "[w]";
                        }
                        else if (grid[j, i] == Block.Actor)
                        {
                            output += "[A]";
                        }
                        else if (grid[j, i] == Block.Goal1 || grid[j, i] == Block.Goal2)
                        {
                            output += "[G]";
                        }
                        else if (grid[j, i] == Block.Move)
                        {
                            output += "[■ ]";
                        }

                    }
                    if (i < gridy - 1) { output += Environment.NewLine; }
                }
            }
            else
            {
                //throw new System.ArgumentException("The NxM Grid has not been initialised.");
                MessageBox.Show("The NxM Grid has not been initialised.");
            }
            return output;
        }

        //Draw Graphics-based grid 
        public Graphics DrawGridPanel(Control c)
        {
            Graphics g = c.CreateGraphics();
            int panelGridx = c.Width;
            int panelGridy = c.Height;

            int cellSizex = panelGridx / gridx;
            int cellSizey = panelGridy / gridy;
            Size cellSize = new Size(cellSizex, cellSizey);

            if (grid != null)
            {
                int penSize = 1;
                bool fill = true;
                for (int i = 0; i < gridy; i++)
                {
                    for (int j = 0; j < gridx; j++)
                    {
                        Pen p = new Pen(Color.Black, penSize);
                        SolidBrush sb = new SolidBrush(Color.Black);
                        if (grid[j, i] == Block.Path)
                        {
                            fill = false;
                        }                        
                        else if (grid[j, i] == Block.Wall)
                        {
                            fill = true;
                            sb = new SolidBrush(Color.Gray);
                        }
                        else if (grid[j, i] == Block.Actor)
                        {
                            fill = true;
                            sb = new SolidBrush(Color.Red);
                        }
                        else if (grid[j, i] == Block.Goal1 || grid[j, i] == Block.Goal2)
                        {
                            fill = true;
                            sb = new SolidBrush(Color.Green);
                        }
                        else if (grid[j, i] == Block.Move)
                        {
                            fill = true;
                            sb = new SolidBrush(Color.AliceBlue);
                        }

                        Rectangle cell = new Rectangle(j * cellSizex, i * cellSizey, cellSizex, cellSizey);

                        if (!fill)
                        {
                            g.DrawRectangle(p, cell);
                        }
                        else
                        {
                            g.FillRectangle(sb, cell);
                        }

                        p.Dispose();
                        sb.Dispose();

                    }
                }
            }
            else
            {
                //throw new System.ArgumentException("The NxM Grid has not been initialised.");
                MessageBox.Show("The NxM Grid has not been initialised.");
            }
            return g;

        }

        //Clean up paths
        public void CleanGrid()
        {
            for (int i = 0; i < gridy; i++)
            {
                for (int j = 0; j < gridx; j++)
                {
                    if (grid[j, i] == Block.Move)
                    {
                        grid[j, i] = Block.Path;
                    }
                }
            }
        }
    }
}
